/*Generated by WaveMaker Studio*/

package com.core_scorecard.core_scorecard.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.core_scorecard.core_scorecard.service.ScorecardWebformService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.core_scorecard.core_scorecard.*;
import com.core_scorecard.core_scorecard.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ScorecardWebform.
 * @see com.core_scorecard.core_scorecard.ScorecardWebform
 */
@RestController(value = "Core_scorecard.ScorecardWebformController")
@RequestMapping("/core_scorecard/ScorecardWebform")
@Api(description = "Exposes APIs to work with ScorecardWebform resource.", value = "ScorecardWebformController")
public class ScorecardWebformController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScorecardWebformController.class);

    @Autowired
    @Qualifier("core_scorecard.ScorecardWebformService")
    private ScorecardWebformService scorecardWebformService;

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setScorecardWebformService(ScorecardWebformService service) {
        this.scorecardWebformService = service;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ScorecardWebform instance associated with the given id.")
    public boolean deleteScorecardWebform(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScorecardWebform with id: {}", id);
        ScorecardWebform deleted = scorecardWebformService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ScorecardWebform instance associated with the given id.")
    public ScorecardWebform editScorecardWebform(@PathVariable(value = "id") Integer id, @RequestBody ScorecardWebform instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ScorecardWebform with id: {}", instance.getId());
        instance.setId(id);
        instance = scorecardWebformService.update(instance);
        LOGGER.debug("ScorecardWebform details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ScorecardWebform instance associated with the given id.")
    public ScorecardWebform getScorecardWebform(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScorecardWebform with id: {}", id);
        ScorecardWebform instance = scorecardWebformService.findById(id);
        LOGGER.debug("ScorecardWebform details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of ScorecardWebform instances.")
    public Page<ScorecardWebform> getScorecardWebforms(Pageable pageable) {
        LOGGER.debug("Rendering ScorecardWebforms list");
        return scorecardWebformService.findAll(pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ScorecardWebform instance.")
    public ScorecardWebform createScorecardWebform(@RequestBody ScorecardWebform instance) {
        LOGGER.debug("Create ScorecardWebform with information: {}", instance);
        instance = scorecardWebformService.create(instance);
        LOGGER.debug("Created ScorecardWebform with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of ScorecardWebform instances matching the search criteria.")
    public Page<ScorecardWebform> findScorecardWebforms(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ScorecardWebforms list");
        return scorecardWebformService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ScorecardWebform instances.")
    public Long countAllScorecardWebforms() {
        LOGGER.debug("counting ScorecardWebforms");
        Long count = scorecardWebformService.countAll();
        return count;
    }
}
