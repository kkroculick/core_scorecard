/*American Express*/

package com.core_scorecard.core_scorecard.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.core_scorecard.core_scorecard.service.ScorecardService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.core_scorecard.core_scorecard.*;
import com.core_scorecard.core_scorecard.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Scorecard.
 * @see com.core_scorecard.core_scorecard.Scorecard
 */
@RestController(value = "Core_scorecard.ScorecardController")
@RequestMapping("/core_scorecard/Scorecard")
@Api(description = "Exposes APIs to work with Scorecard resource.", value = "ScorecardController")
public class ScorecardController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScorecardController.class);

    @Autowired
    @Qualifier("core_scorecard.ScorecardService")
    private ScorecardService scorecardService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Scorecard instances matching the search criteria.")
    public Page<Scorecard> findScorecards(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Scorecards list");
        return scorecardService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Scorecard instances.")
    public Page<Scorecard> getScorecards(Pageable pageable) {
        LOGGER.debug("Rendering Scorecards list");
        return scorecardService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Scorecard instance associated with the given id.")
    public Scorecard getScorecard(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Scorecard with id: {}", id);
        Scorecard instance = scorecardService.findById(id);
        LOGGER.debug("Scorecard details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Scorecard instance associated with the given id.")
    public boolean deleteScorecard(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Scorecard with id: {}", id);
        Scorecard deleted = scorecardService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Scorecard instance associated with the given id.")
    public Scorecard editScorecard(@PathVariable("id") Integer id, @RequestBody Scorecard instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Scorecard with id: {}", instance.getId());
        instance.setId(id);
        instance = scorecardService.update(instance);
        LOGGER.debug("Scorecard details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Scorecard instance.")
    public Scorecard createScorecard(@RequestBody Scorecard instance) {
        LOGGER.debug("Create Scorecard with information: {}", instance);
        instance = scorecardService.create(instance);
        LOGGER.debug("Created Scorecard with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setScorecardService(ScorecardService service) {
        this.scorecardService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Scorecard instances.")
    public Long countAllScorecards() {
        LOGGER.debug("counting Scorecards");
        Long count = scorecardService.countAll();
        return count;
    }
}
