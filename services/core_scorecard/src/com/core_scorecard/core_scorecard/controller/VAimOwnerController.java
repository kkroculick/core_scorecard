/*American Express*/

package com.core_scorecard.core_scorecard.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.core_scorecard.core_scorecard.service.VAimOwnerService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.core_scorecard.core_scorecard.*;
import com.core_scorecard.core_scorecard.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class VAimOwner.
 * @see com.core_scorecard.core_scorecard.VAimOwner
 */
@RestController(value = "Core_scorecard.VAimOwnerController")
@RequestMapping("/core_scorecard/VAimOwner")
@Api(description = "Exposes APIs to work with VAimOwner resource.", value = "VAimOwnerController")
public class VAimOwnerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VAimOwnerController.class);

    @Autowired
    @Qualifier("core_scorecard.VAimOwnerService")
    private VAimOwnerService vAimOwnerService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of VAimOwner instances matching the search criteria.")
    public Page<VAimOwner> findVAimOwners(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VAimOwners list");
        return vAimOwnerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of VAimOwner instances.")
    public Page<VAimOwner> getVAimOwners(Pageable pageable) {
        LOGGER.debug("Rendering VAimOwners list");
        return vAimOwnerService.findAll(pageable);
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the VAimOwner instance associated with the given composite-id.")
    public VAimOwner getVAimOwner(@RequestParam("applicationName") String applicationName, @RequestParam("applicationId") String applicationId, @RequestParam("applicationDirector") String applicationDirector, @RequestParam("applicationIntegrator") String applicationIntegrator, @RequestParam("applicationPfa") String applicationPfa, @RequestParam("applicationVpLevel1") String applicationVpLevel1, @RequestParam("applicationVpLevel1CostCenter") String applicationVpLevel1CostCenter, @RequestParam("applicationVpLevel2") String applicationVpLevel2, @RequestParam("applicationSvp") String applicationSvp, @RequestParam("productionSupportDirector") String productionSupportDirector, @RequestParam("productionSupportVp") String productionSupportVp, @RequestParam("owningBusinessDirector") String owningBusinessDirector, @RequestParam("owningBusinessVp") String owningBusinessVp, @RequestParam("lineOfBusinessLvl1") String lineOfBusinessLvl1, @RequestParam("lineOfBusinessLvl2") String lineOfBusinessLvl2) throws EntityNotFoundException {
        VAimOwnerId temp = new VAimOwnerId();
        temp.setApplicationName(applicationName);
        temp.setApplicationId(applicationId);
        temp.setApplicationDirector(applicationDirector);
        temp.setApplicationIntegrator(applicationIntegrator);
        temp.setApplicationPfa(applicationPfa);
        temp.setApplicationVpLevel1(applicationVpLevel1);
        temp.setApplicationVpLevel1CostCenter(applicationVpLevel1CostCenter);
        temp.setApplicationVpLevel2(applicationVpLevel2);
        temp.setApplicationSvp(applicationSvp);
        temp.setProductionSupportDirector(productionSupportDirector);
        temp.setProductionSupportVp(productionSupportVp);
        temp.setOwningBusinessDirector(owningBusinessDirector);
        temp.setOwningBusinessVp(owningBusinessVp);
        temp.setLineOfBusinessLvl1(lineOfBusinessLvl1);
        temp.setLineOfBusinessLvl2(lineOfBusinessLvl2);
        LOGGER.debug("Getting VAimOwner with id: {}", temp);
        VAimOwner instance = vAimOwnerService.findById(temp);
        LOGGER.debug("VAimOwner details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the VAimOwner instance associated with the given composite-id.")
    public boolean deleteVAimOwner(@RequestParam("applicationName") String applicationName, @RequestParam("applicationId") String applicationId, @RequestParam("applicationDirector") String applicationDirector, @RequestParam("applicationIntegrator") String applicationIntegrator, @RequestParam("applicationPfa") String applicationPfa, @RequestParam("applicationVpLevel1") String applicationVpLevel1, @RequestParam("applicationVpLevel1CostCenter") String applicationVpLevel1CostCenter, @RequestParam("applicationVpLevel2") String applicationVpLevel2, @RequestParam("applicationSvp") String applicationSvp, @RequestParam("productionSupportDirector") String productionSupportDirector, @RequestParam("productionSupportVp") String productionSupportVp, @RequestParam("owningBusinessDirector") String owningBusinessDirector, @RequestParam("owningBusinessVp") String owningBusinessVp, @RequestParam("lineOfBusinessLvl1") String lineOfBusinessLvl1, @RequestParam("lineOfBusinessLvl2") String lineOfBusinessLvl2) throws EntityNotFoundException {
        VAimOwnerId temp = new VAimOwnerId();
        temp.setApplicationName(applicationName);
        temp.setApplicationId(applicationId);
        temp.setApplicationDirector(applicationDirector);
        temp.setApplicationIntegrator(applicationIntegrator);
        temp.setApplicationPfa(applicationPfa);
        temp.setApplicationVpLevel1(applicationVpLevel1);
        temp.setApplicationVpLevel1CostCenter(applicationVpLevel1CostCenter);
        temp.setApplicationVpLevel2(applicationVpLevel2);
        temp.setApplicationSvp(applicationSvp);
        temp.setProductionSupportDirector(productionSupportDirector);
        temp.setProductionSupportVp(productionSupportVp);
        temp.setOwningBusinessDirector(owningBusinessDirector);
        temp.setOwningBusinessVp(owningBusinessVp);
        temp.setLineOfBusinessLvl1(lineOfBusinessLvl1);
        temp.setLineOfBusinessLvl2(lineOfBusinessLvl2);
        LOGGER.debug("Deleting VAimOwner with id: {}", temp);
        VAimOwner deleted = vAimOwnerService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the VAimOwner instance associated with the given composite-id.")
    public VAimOwner editVAimOwner(@RequestParam("applicationName") String applicationName, @RequestParam("applicationId") String applicationId, @RequestParam("applicationDirector") String applicationDirector, @RequestParam("applicationIntegrator") String applicationIntegrator, @RequestParam("applicationPfa") String applicationPfa, @RequestParam("applicationVpLevel1") String applicationVpLevel1, @RequestParam("applicationVpLevel1CostCenter") String applicationVpLevel1CostCenter, @RequestParam("applicationVpLevel2") String applicationVpLevel2, @RequestParam("applicationSvp") String applicationSvp, @RequestParam("productionSupportDirector") String productionSupportDirector, @RequestParam("productionSupportVp") String productionSupportVp, @RequestParam("owningBusinessDirector") String owningBusinessDirector, @RequestParam("owningBusinessVp") String owningBusinessVp, @RequestParam("lineOfBusinessLvl1") String lineOfBusinessLvl1, @RequestParam("lineOfBusinessLvl2") String lineOfBusinessLvl2, @RequestBody VAimOwner instance) throws EntityNotFoundException {
        VAimOwnerId temp = new VAimOwnerId();
        temp.setApplicationName(applicationName);
        temp.setApplicationId(applicationId);
        temp.setApplicationDirector(applicationDirector);
        temp.setApplicationIntegrator(applicationIntegrator);
        temp.setApplicationPfa(applicationPfa);
        temp.setApplicationVpLevel1(applicationVpLevel1);
        temp.setApplicationVpLevel1CostCenter(applicationVpLevel1CostCenter);
        temp.setApplicationVpLevel2(applicationVpLevel2);
        temp.setApplicationSvp(applicationSvp);
        temp.setProductionSupportDirector(productionSupportDirector);
        temp.setProductionSupportVp(productionSupportVp);
        temp.setOwningBusinessDirector(owningBusinessDirector);
        temp.setOwningBusinessVp(owningBusinessVp);
        temp.setLineOfBusinessLvl1(lineOfBusinessLvl1);
        temp.setLineOfBusinessLvl2(lineOfBusinessLvl2);
        vAimOwnerService.delete(temp);
        instance = vAimOwnerService.create(instance);
        LOGGER.debug("VAimOwner details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new VAimOwner instance.")
    public VAimOwner createVAimOwner(@RequestBody VAimOwner instance) {
        LOGGER.debug("Create VAimOwner with information: {}", instance);
        instance = vAimOwnerService.create(instance);
        LOGGER.debug("Created VAimOwner with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setVAimOwnerService(VAimOwnerService service) {
        this.vAimOwnerService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of VAimOwner instances.")
    public Long countAllVAimOwners() {
        LOGGER.debug("counting VAimOwners");
        Long count = vAimOwnerService.countAll();
        return count;
    }
}
