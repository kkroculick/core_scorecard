/*American Express*/

package com.core_scorecard.core_scorecard.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.core_scorecard.core_scorecard.*;


/**
 * ServiceImpl object for domain model class Platform.
 * @see com.core_scorecard.core_scorecard.Platform
 */
@Service("core_scorecard.PlatformService")
public class PlatformServiceImpl implements PlatformService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PlatformServiceImpl.class);

    @Autowired
    @Qualifier("core_scorecard.PlatformDao")
    private WMGenericDao<Platform, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Platform, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "core_scorecardTransactionManager")
     public Page<Platform> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "core_scorecardTransactionManager")
    @Override
    public Platform create(Platform platform) {
        LOGGER.debug("Creating a new platform with information: {}" , platform);
        return this.wmGenericDao.create(platform);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "core_scorecardTransactionManager")
    @Override
    public Platform delete(Integer platformId) throws EntityNotFoundException {
        LOGGER.debug("Deleting platform with id: {}" , platformId);
        Platform deleted = this.wmGenericDao.findById(platformId);
        if (deleted == null) {
            LOGGER.debug("No platform found with id: {}" , platformId);
            throw new EntityNotFoundException(String.valueOf(platformId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "core_scorecardTransactionManager")
    @Override
    public Page<Platform> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all platforms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "core_scorecardTransactionManager")
    @Override
    public Page<Platform> findAll(Pageable pageable) {
        LOGGER.debug("Finding all platforms");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "core_scorecardTransactionManager")
    @Override
    public Platform findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding platform by id: {}" , id);
        Platform platform=this.wmGenericDao.findById(id);
        if(platform==null){
            LOGGER.debug("No platform found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return platform;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "core_scorecardTransactionManager")
    @Override
    public Platform update(Platform updated) throws EntityNotFoundException {
        LOGGER.debug("Updating platform with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "core_scorecardTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


